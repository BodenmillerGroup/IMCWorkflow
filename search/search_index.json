{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"A guide to IMC data analysis This website collects tools for imaging mass cytometry\u2122 (IMC\u2122) data analysis. Common analysis steps include image processing , image visualization , and downstream analysis . Introduction Imaging mass cytometry is a highly-multiplexed imaging technology that measures the expression of over 40 proteins and RNA molecules (also referred to as markers) in tissues 1 . For more information on imaging mass cytometry, please refer to the more extended Introduction . Image processing Upon image acquisition, raw data are stored in proprietary MCD\u2122 format. This data file contains experiment-specific metadata, one or more multi-channel images (one per acquisition), and the generated panoramas (see Introduction ). The first step of the pre-processing pipeline includes the conversion of images from .mcd to .ome.tiff or .tiff format, which can be read by most image analysis software. Cell segmentation is performed using random forest or deep learning-based approaches outlined in Image processing . After cell segmentation, intensity features representing marker abundances and morphological features are extracted and exported. These IMC image processing approaches are implemented in the IMC Segmentation Pipeline and in the steinbock framework. For more details see Image processing . Interactive image visualization Raw .mcd files can be interactively visualized using the MCD Viewer software distributed by Fluidigm\u00ae. The histoCAT toolbox supports interactive image and data visualization, clustering, and spatial analysis of the data generated by IMC. The histoCAT-web web application supports browser-based analysis directly on raw IMC data. The napari-imc plugin for napari allows joint visualization of multichannel IMC images and panoramas in a shared coordinate system. A more detailed description of these viewers are described at Image visualization . Downstream single-cell data analysis The extracted single-cell features can be read into R using the imcRtools package. Spatially annotated single-cell data is stored in a SingleCellExperiment or SpatialExperiment container. The book Orchestrating Single-Cell Analysis with Bioconductor is an excellent resource regarding single-cell data analysis including dimensionality reduction, clustering, and data visualization based on the SingleCellExperiment container. As part of the Bioconductor project, the imcRtools package supports a variety of spatial data analysis approaches. For Python-based analysis of single-cell data, steinbock supports the export to anndata format. For an overview on common analysis steps, please refer to Downstream analysis . Contributors Nils Eling Jonas Windhager Daniel Schulz Bernd Bodenmiller Publication Windhager J, Bodenmiller B, Eling N (2021). An end-to-end workflow for multiplexed image processing and analysis. bioRxiv. doi: https://doi.org/10.1101/2021.11.12.468357. Giesen C. et al. (2014) Highly multiplexed imaging of tumor tissues with subcellular resolution by mass cytometry. Nat. Methods, 11, 417\u2013422. \u21a9","title":"Home"},{"location":"index.html#a-guide-to-imc-data-analysis","text":"This website collects tools for imaging mass cytometry\u2122 (IMC\u2122) data analysis. Common analysis steps include image processing , image visualization , and downstream analysis .","title":"A guide to IMC data analysis"},{"location":"index.html#introduction","text":"Imaging mass cytometry is a highly-multiplexed imaging technology that measures the expression of over 40 proteins and RNA molecules (also referred to as markers) in tissues 1 . For more information on imaging mass cytometry, please refer to the more extended Introduction .","title":"Introduction"},{"location":"index.html#image-processing","text":"Upon image acquisition, raw data are stored in proprietary MCD\u2122 format. This data file contains experiment-specific metadata, one or more multi-channel images (one per acquisition), and the generated panoramas (see Introduction ). The first step of the pre-processing pipeline includes the conversion of images from .mcd to .ome.tiff or .tiff format, which can be read by most image analysis software. Cell segmentation is performed using random forest or deep learning-based approaches outlined in Image processing . After cell segmentation, intensity features representing marker abundances and morphological features are extracted and exported. These IMC image processing approaches are implemented in the IMC Segmentation Pipeline and in the steinbock framework. For more details see Image processing .","title":"Image processing"},{"location":"index.html#interactive-image-visualization","text":"Raw .mcd files can be interactively visualized using the MCD Viewer software distributed by Fluidigm\u00ae. The histoCAT toolbox supports interactive image and data visualization, clustering, and spatial analysis of the data generated by IMC. The histoCAT-web web application supports browser-based analysis directly on raw IMC data. The napari-imc plugin for napari allows joint visualization of multichannel IMC images and panoramas in a shared coordinate system. A more detailed description of these viewers are described at Image visualization .","title":"Interactive image visualization"},{"location":"index.html#downstream-single-cell-data-analysis","text":"The extracted single-cell features can be read into R using the imcRtools package. Spatially annotated single-cell data is stored in a SingleCellExperiment or SpatialExperiment container. The book Orchestrating Single-Cell Analysis with Bioconductor is an excellent resource regarding single-cell data analysis including dimensionality reduction, clustering, and data visualization based on the SingleCellExperiment container. As part of the Bioconductor project, the imcRtools package supports a variety of spatial data analysis approaches. For Python-based analysis of single-cell data, steinbock supports the export to anndata format. For an overview on common analysis steps, please refer to Downstream analysis .","title":"Downstream single-cell data analysis"},{"location":"index.html#contributors","text":"Nils Eling Jonas Windhager Daniel Schulz Bernd Bodenmiller","title":"Contributors"},{"location":"index.html#publication","text":"Windhager J, Bodenmiller B, Eling N (2021). An end-to-end workflow for multiplexed image processing and analysis. bioRxiv. doi: https://doi.org/10.1101/2021.11.12.468357. Giesen C. et al. (2014) Highly multiplexed imaging of tumor tissues with subcellular resolution by mass cytometry. Nat. Methods, 11, 417\u2013422. \u21a9","title":"Publication"},{"location":"analysis.html","text":"Downstream analysis of IMC data This page gives a brief overview of the common steps for downstream analysis of IMC\u2122 data. For a more detailed workflow using example data, please refer to the IMC Data Analysis repository (under development). The analysis described here relies on the Bioconductor framework for single-cell analysis. The book Orchestrating Single-Cell Analysis with Bioconductor provides a good introduction into general single-cell analysis tasks. Although the book mainly focuses on single-cell RNA sequencing data analysis, most concepts (e.g., data handling, clustering, and visualization) can be applied to single-cell IMC data. The book is offered in basic and advanced versions. Reading in the data The imcRtools 1 package reads data generated by steinbock (using read_steinbock ) or by the IMC Segmentation Pipeline (using read_cpout ) for downstream analysis in R . Single-cell data (mean intensities per cell and channel, morphological features and locations, and spatial object graphs) are read into SpatialExperiment or SingleCellExperiment objects. The structure is as follows: mean intensity per cell and channel are stored in the counts assay of the objects (cells as columns, channels as rows). cell-specific morphological features and image information are stored in the colData slot of the objects marker-specific information extracted from the panel file are stored in the rowData slot of the objects spatial object graphs are stored as edge lists in the colPair slot of the objects With the SingleCellExperiment object, the locations of cells are stored in the colData slot. For the SpatialExperiment container, the cells' locations are stored in the spatialCoords slot. Spillover correction Channel-to-channel spillover that can occur between neighboring channels leads to false signals. This should be corrected as described previously 2 . Spillover correction is an optional step in IMC data analysis and requires a specific experimental setup: On an agarose slide, metal-tagged antibodies are spotted individually, and an individual region of interest is ablated for each antibody. Data from individual regions are processed using imcRtools as explained in the spillover correction section of IMC data analysis . After obtaining a spillover matrix, single-cell data can be compensated using the CATALYST package. Quality control Quality control (QC) is a crucial step to avoid technical artefacts in downstream analyses. Broadly speaking, there are two levels of data quality control: Pixel-level QC: The first step after image acquisition and pre-processing is the visual assessment of image quality. For this, interactive tools such as napari-imc , histoCAT , QuPath , or cytomapper (see below) can be used. Considerations when viewing images for the first time are: (i) are markers known to be specifically expressed detected as expected (e.g., high signal-to-noise ratio, cell type specificity, adequate maximum intensity per channel, etc.), (ii) is channel-spillover visually detectable, and (iii) are staining differences detectable between acquisitions? Cell-level QC: After reading in the single-cell data (e.g. using imcRtools ), cell-level QC includes (i) global staining differences between acquisitions or batches (e.g., in form of ridge plots using dittoSeq ), (ii) marker-to-marker correlations across all cells, (iii) low-dimensional representations of the data (see below), and (iv) the cell density and cell size distributions per acquisition. Cell-type identification One of the first analysis tasks includes cell phenotyping. This is commonly done by grouping cells based on marker expression and labeling these groups based on their biological roles. There are three major approaches for identification of cell types in the single-cell IMC data. Unsupervised clustering-based: Clustering is the most common approach for identification of cell types in an unbiased manner. To cluster single-cells based on their marker expression, software packages have been developed that utilize graph-based clustering strategies (e.g., Rphenograph , scran ) or self-organising maps (the flowSOM implementation in the CATALYST package). The bluster package offers a wide variety of clustering strategies applicable to single-cell data. After clustering, the mean marker expression per group is used to label clusters. Gating and classification: An alternative and more supervised approach to identify cell types from highly multiplexed images relies on manual gating (labeling) of cells and consecutive classification of all unlabeled cells. The cytomapperShiny application available in the cytomapper package allows to gate cells based on marker expression with joint visualization of the selected cells on composite images. The ground truth labels are saved and can be used as training dataset for general machine learning approaches (e.g., using caret , mlr or tidymodels ). We observed a high classification accuracy when applying random forest-based classification. Additionally, a more specialized framework for classifying cells is the SingleR package. Classification based on prior knowledge: Classification approaches that do not rely on manual labeling of cells were implemented in the R Garnett and Python Astir modeling frameworks. Using these strategies, the user defines which cell types express which markers and cell labeling is performed automatically. Data visualization Visualization for bioimaging data can be performed on the pixel- and single-cell levels: Pixel level visualization Interactive visualization can be performed using GUI-based tools as described in the Image visualization section. As an alternative, the cytomapper Bioconductor package supports handling and visualization of multi-channel images using the statistical programming language R. The main visualization functionalities of cytomapper are three-fold: plotPixels The function takes a CytoImageList object (available via the cytomapper package) containing multi-channel images representing pixel-level expression values, and optionally a CytoImageList object containing segmentation masks and a SingleCellExperiment object containing cell-level metadata. It allows the visualization of pixel-level information of up to six channels and outlining of cells based on cell-level metadata. plotCells This function takes a CytoImageList object containing segmentation masks, and a SingleCellExperiment object containing cell-level mean expression values and metadata information. It allows the visualization of cell-level expression data and metadata information. cytomapperShiny This Shiny application allows gating of cells based on their expression values, and visualizes selected cells on their corresponding images. It requires at least a SingleCellExperiment as input and optionally CytoImageList objects containing segmentation masks and multi-channel images. Single-cell level visualization Multiple Bioconductor packages have been released to visualize single-cell data contained in a SingleCellExperiment or a SpatialExperiment object. A common approach to single-cell visualization is to first perform dimensionality reduction via PCA, tSNE, UMAP or Diffusion Maps. These functions are available in the scater Bioconductor package. The scater package further supports visualization of cells in low dimensions and a variety of functions to visualize single-cell expression (see here ). In addition, the dittoSeq package offers an extensive range of visualization functionality using a SingleCellExperiment object as input. For spatial visualization of single-cells and their interactions, the imcRtools package exports the plotSpatial function. Spatial analysis A number of data analysis approaches have previously been described to extract biological information from spatially annotated, single-cell resolved data 3 4 5 6 7 . The imcRtools package standardizes spatial data analysis by providing functionalities that wrap around the SpatialExperiment and SingleCellExperiment object classes. Whereas steinbock and the IMC Segmentation Pipeline compute spatial object graphs, the imcRtools package provides the buildSpatialGraph function for constructing interaction graphs \"on the fly\". The aggregateNeighbors function computes the proportions of cell types within the direct neighborhood of each cell. Alternatively, expression counts of neighboring cells are summarized. These summarized values can be used to cluster cells and to detect cellular neighborhoods 3 6 . The patchDetection function detects spatial clusters of defined types of cells. By defining a certain distance threshold, all cells within the vicinity of these clusters are detected as well 7 . The countInteractions and testInteractions functions allow counting and testing the average cell type to cell type interactions per image 4 5 . Example datasets The imcdatasets Bioconductor package provides a collection of publicly available IMC datasets. These can be used for data re-analysis and methods development and are provided in standardized formats using the SingleCellExperiment and CytoImageList object classes. Windhager J. et al. (2021) An end-to-end workflow for multiplexed image processing and analysis. bioRxiv \u21a9 Chevrier S. et al. (2018) Compensation of Signal Spillover in Suspension and Imaging Mass Cytometry. Cell Systems \u21a9 Goltsev Y. et al. (2018) Deep Profiling of Mouse Splenic Architecture with CODEX Multiplexed Imaging. Cell 174 \u21a9 \u21a9 Schapiro D. et al. (2017) histoCAT: analysis of cell phenotypes and interactions in multiplex image cytometry data. Nature Methods \u21a9 \u21a9 Schulz D. et al. (2018) Simultaneous Multiplexed Imaging of mRNA and Proteins with Subcellular Resolution in Breast Cancer Tissue Samples by Mass Cytometry. Cell Systems \u21a9 \u21a9 Sch\u00fcrch C. M. et al. (2021) Coordinated Cellular Neighborhoods Orchestrate Antitumoral Immunity at the Colorectal Cancer Invasive Front. Cell \u21a9 \u21a9 Hoch T. et al. (2021) Multiplexed Imaging Mass Cytometry of Chemokine Milieus in Metastatic Melanoma Characterizes Features of Response to Immunotherapy. bioRxiv \u21a9 \u21a9","title":"Downstream analysis"},{"location":"analysis.html#downstream-analysis-of-imc-data","text":"This page gives a brief overview of the common steps for downstream analysis of IMC\u2122 data. For a more detailed workflow using example data, please refer to the IMC Data Analysis repository (under development). The analysis described here relies on the Bioconductor framework for single-cell analysis. The book Orchestrating Single-Cell Analysis with Bioconductor provides a good introduction into general single-cell analysis tasks. Although the book mainly focuses on single-cell RNA sequencing data analysis, most concepts (e.g., data handling, clustering, and visualization) can be applied to single-cell IMC data. The book is offered in basic and advanced versions.","title":"Downstream analysis of IMC data"},{"location":"analysis.html#reading-in-the-data","text":"The imcRtools 1 package reads data generated by steinbock (using read_steinbock ) or by the IMC Segmentation Pipeline (using read_cpout ) for downstream analysis in R . Single-cell data (mean intensities per cell and channel, morphological features and locations, and spatial object graphs) are read into SpatialExperiment or SingleCellExperiment objects. The structure is as follows: mean intensity per cell and channel are stored in the counts assay of the objects (cells as columns, channels as rows). cell-specific morphological features and image information are stored in the colData slot of the objects marker-specific information extracted from the panel file are stored in the rowData slot of the objects spatial object graphs are stored as edge lists in the colPair slot of the objects With the SingleCellExperiment object, the locations of cells are stored in the colData slot. For the SpatialExperiment container, the cells' locations are stored in the spatialCoords slot.","title":"Reading in the data"},{"location":"analysis.html#spillover-correction","text":"Channel-to-channel spillover that can occur between neighboring channels leads to false signals. This should be corrected as described previously 2 . Spillover correction is an optional step in IMC data analysis and requires a specific experimental setup: On an agarose slide, metal-tagged antibodies are spotted individually, and an individual region of interest is ablated for each antibody. Data from individual regions are processed using imcRtools as explained in the spillover correction section of IMC data analysis . After obtaining a spillover matrix, single-cell data can be compensated using the CATALYST package.","title":"Spillover correction"},{"location":"analysis.html#quality-control","text":"Quality control (QC) is a crucial step to avoid technical artefacts in downstream analyses. Broadly speaking, there are two levels of data quality control: Pixel-level QC: The first step after image acquisition and pre-processing is the visual assessment of image quality. For this, interactive tools such as napari-imc , histoCAT , QuPath , or cytomapper (see below) can be used. Considerations when viewing images for the first time are: (i) are markers known to be specifically expressed detected as expected (e.g., high signal-to-noise ratio, cell type specificity, adequate maximum intensity per channel, etc.), (ii) is channel-spillover visually detectable, and (iii) are staining differences detectable between acquisitions? Cell-level QC: After reading in the single-cell data (e.g. using imcRtools ), cell-level QC includes (i) global staining differences between acquisitions or batches (e.g., in form of ridge plots using dittoSeq ), (ii) marker-to-marker correlations across all cells, (iii) low-dimensional representations of the data (see below), and (iv) the cell density and cell size distributions per acquisition.","title":"Quality control"},{"location":"analysis.html#cell-type-identification","text":"One of the first analysis tasks includes cell phenotyping. This is commonly done by grouping cells based on marker expression and labeling these groups based on their biological roles. There are three major approaches for identification of cell types in the single-cell IMC data. Unsupervised clustering-based: Clustering is the most common approach for identification of cell types in an unbiased manner. To cluster single-cells based on their marker expression, software packages have been developed that utilize graph-based clustering strategies (e.g., Rphenograph , scran ) or self-organising maps (the flowSOM implementation in the CATALYST package). The bluster package offers a wide variety of clustering strategies applicable to single-cell data. After clustering, the mean marker expression per group is used to label clusters. Gating and classification: An alternative and more supervised approach to identify cell types from highly multiplexed images relies on manual gating (labeling) of cells and consecutive classification of all unlabeled cells. The cytomapperShiny application available in the cytomapper package allows to gate cells based on marker expression with joint visualization of the selected cells on composite images. The ground truth labels are saved and can be used as training dataset for general machine learning approaches (e.g., using caret , mlr or tidymodels ). We observed a high classification accuracy when applying random forest-based classification. Additionally, a more specialized framework for classifying cells is the SingleR package. Classification based on prior knowledge: Classification approaches that do not rely on manual labeling of cells were implemented in the R Garnett and Python Astir modeling frameworks. Using these strategies, the user defines which cell types express which markers and cell labeling is performed automatically.","title":"Cell-type identification"},{"location":"analysis.html#data-visualization","text":"Visualization for bioimaging data can be performed on the pixel- and single-cell levels: Pixel level visualization Interactive visualization can be performed using GUI-based tools as described in the Image visualization section. As an alternative, the cytomapper Bioconductor package supports handling and visualization of multi-channel images using the statistical programming language R. The main visualization functionalities of cytomapper are three-fold: plotPixels The function takes a CytoImageList object (available via the cytomapper package) containing multi-channel images representing pixel-level expression values, and optionally a CytoImageList object containing segmentation masks and a SingleCellExperiment object containing cell-level metadata. It allows the visualization of pixel-level information of up to six channels and outlining of cells based on cell-level metadata. plotCells This function takes a CytoImageList object containing segmentation masks, and a SingleCellExperiment object containing cell-level mean expression values and metadata information. It allows the visualization of cell-level expression data and metadata information. cytomapperShiny This Shiny application allows gating of cells based on their expression values, and visualizes selected cells on their corresponding images. It requires at least a SingleCellExperiment as input and optionally CytoImageList objects containing segmentation masks and multi-channel images. Single-cell level visualization Multiple Bioconductor packages have been released to visualize single-cell data contained in a SingleCellExperiment or a SpatialExperiment object. A common approach to single-cell visualization is to first perform dimensionality reduction via PCA, tSNE, UMAP or Diffusion Maps. These functions are available in the scater Bioconductor package. The scater package further supports visualization of cells in low dimensions and a variety of functions to visualize single-cell expression (see here ). In addition, the dittoSeq package offers an extensive range of visualization functionality using a SingleCellExperiment object as input. For spatial visualization of single-cells and their interactions, the imcRtools package exports the plotSpatial function.","title":"Data visualization"},{"location":"analysis.html#spatial-analysis","text":"A number of data analysis approaches have previously been described to extract biological information from spatially annotated, single-cell resolved data 3 4 5 6 7 . The imcRtools package standardizes spatial data analysis by providing functionalities that wrap around the SpatialExperiment and SingleCellExperiment object classes. Whereas steinbock and the IMC Segmentation Pipeline compute spatial object graphs, the imcRtools package provides the buildSpatialGraph function for constructing interaction graphs \"on the fly\". The aggregateNeighbors function computes the proportions of cell types within the direct neighborhood of each cell. Alternatively, expression counts of neighboring cells are summarized. These summarized values can be used to cluster cells and to detect cellular neighborhoods 3 6 . The patchDetection function detects spatial clusters of defined types of cells. By defining a certain distance threshold, all cells within the vicinity of these clusters are detected as well 7 . The countInteractions and testInteractions functions allow counting and testing the average cell type to cell type interactions per image 4 5 .","title":"Spatial analysis"},{"location":"analysis.html#example-datasets","text":"The imcdatasets Bioconductor package provides a collection of publicly available IMC datasets. These can be used for data re-analysis and methods development and are provided in standardized formats using the SingleCellExperiment and CytoImageList object classes. Windhager J. et al. (2021) An end-to-end workflow for multiplexed image processing and analysis. bioRxiv \u21a9 Chevrier S. et al. (2018) Compensation of Signal Spillover in Suspension and Imaging Mass Cytometry. Cell Systems \u21a9 Goltsev Y. et al. (2018) Deep Profiling of Mouse Splenic Architecture with CODEX Multiplexed Imaging. Cell 174 \u21a9 \u21a9 Schapiro D. et al. (2017) histoCAT: analysis of cell phenotypes and interactions in multiplex image cytometry data. Nature Methods \u21a9 \u21a9 Schulz D. et al. (2018) Simultaneous Multiplexed Imaging of mRNA and Proteins with Subcellular Resolution in Breast Cancer Tissue Samples by Mass Cytometry. Cell Systems \u21a9 \u21a9 Sch\u00fcrch C. M. et al. (2021) Coordinated Cellular Neighborhoods Orchestrate Antitumoral Immunity at the Colorectal Cancer Invasive Front. Cell \u21a9 \u21a9 Hoch T. et al. (2021) Multiplexed Imaging Mass Cytometry of Chemokine Milieus in Metastatic Melanoma Characterizes Features of Response to Immunotherapy. bioRxiv \u21a9 \u21a9","title":"Example datasets"},{"location":"intro.html","text":"An introduction to imaging mass cytometry IMC\u2122 utilizes metal-tagged antibodies to detect over 40 proteins or other metal-tagged molecules in biological samples. IMC can be used to perform highly multiplexed imaging and is particularly suited to profiling selected areas of tissues across many samples. Overview of imaging mass cytometry data acquisition. Taken from Giesen et al. 1 What it is IMC was first described by the Bodenmiller laboratory in 2014 1 . Since then it has been commercialised by Fluidigm \u00ae and is now distributed as the Hyperion\u2122 imaging system (documentation is available here ). IMC captures the spatial expression of multiple proteins and mRNA molecules in parallel. With a nominal 1 \u03bcm resolution, IMC is able to detect cytoplasmic and nuclear localisation of proteins. The current ablation frequency of IMC is 200Hz, meaning that a 1 mm 2 area can be imaged within about 2 hours. How it works Technical aspects of data acquisition are described in the original publication 1 . Briefly, antibodies to detect targets in biological material are labeled with heavy metals (e.g., lanthanides) that do not occur in biological systems and thus can be used upon binding to their target as a readout similar to fluorophores in fluorescence microscopy. Thin sections of the biological sample on a glass slide are stained with an antibody cocktail. Stained microscopy slides are mounted on a precise motor-driven stage inside the ablation chamber of the IMC instrument. A high-energy UV laser is focused on the tissue, and each individual laser shot ablates tissue from an area of roughly 1 \u03bcm 2 . The energy of the laser is absorbed by the tissue resulting in vaporization followed by condensation of the ablated material. The ablated material from each laser shot is transported in the gas phase into the plasma of the mass cytometer, where first atomization of the particles and then ionization of the atoms occurs. The ion cloud is then transferred into a vacuum, and all ions below a mass of 80 m/z are filtered using a quadrupole mass filter. The remaining ions (mostly those used to tag antibodies) are analyzed in a time-of-flight mass spectrometer to ultimately obtain an accumulated mass spectrum from all ions that correspond to a single laser shot. One can regard this spectrum as the information underlying a 1 \u03bcm 2 pixel. With repetitive laser shots (e.g., at 200 Hz) and a simultaneous lateral sample movement, a tissue can be ablated pixel by pixel. Ultimately an image is reconstructed from each pixel mass spectrum. In principle, IMC can be applied to the same type of samples as conventional fluorescence microscopy. The largest distinction from fluorescence microscopy is that for IMC primary-labeled antibodies are commonly used, whereas in fluorescence microscopy secondary antibodies carrying fluorophores are widely applied. Additionally, for IMC, samples are dried before acquisition and can be stored for years. Formalin-fixed and paraffin-embedded (FFPE) samples are widely used for IMC. The FFPE blocks are cut to 2-5 \u03bcm thick sections and are stained, dried, and analyzed with IMC. Antibodies and Staining Metal-labeled antibodies are used to stain molecules in tissues enabling to delineate tissue structures, cells, and subcellular structures. Metal-conjugated antibodies can either be purchased directly from Fluidigm ( MaxPar IMC Antibodies ), or antibodies can be purchased and labeled individually ( MaxPar Antibody Labeling ). Antibody labeling using the MaxPar kits is performed via TCEP antibody reduction followed by crosslinking with sulfhydryl-reactive maleimide-bearing metal polymers. For each antibody it is essential to validate its functionality, specificity and optimize its usage to provide optimal signal to noise. To facilitate antibody handling, a database is highly useful. Airlab is such a platform; it allows antibody lot tracking, validation data uploads, and panel generation for subsequent upload to the IMC acquisition software from Fluidigm. Depending on the sample type, different staining protocols can be used. Generally, once antibodies of choice have been conjugated to a metal tag, titration experiments are performed to identify the optimal staining concentration. For FFPE samples, different staining protocols have been described, and different antibodies show variable staining with different protocols. Protocols such as the one provided by Fluidigm or the one describe by Ijsselsteijn et al. 2 are recommended. Briefly, for FFPE tissues, a dewaxing step is performed to remove the paraffin used to embed the material, followed by a graded re-hydration of the samples. Thereafter, heat-induced epitope retrieval (HIER), a step aiming at the reversal of formalin-based fixation, is used to unmask epitopes within tissues and make them accessible to antibodies. Epitope unmasking is generally performed in either basic, EDTA-based buffers (pH 9.2) or acidic, citrate-based buffers (pH 6). Next, a buffer containing bovine serum albumin (BSA) is used to block non-specific binding. This buffer is also used to dilute antibody stocks for the actual antibody staining. Staining time and temperature may vary and optimization must be performed to ensure that each single antibody performs well. However, overnight staining at 4\u00b0C or 3-5 hours at room temperature seem to be suitable in many cases. Following antibody incubation, unbound antibodies are washed away and a counterstain comparable to DAPI is applied to enable the identification of nuclei. The Iridium intercalator from Fluidigm is a reagent of choice and applied in a brief 5 minute staining. Finally, the samples are washed again and then dried under an airflow. Once dried, the samples are ready for analysis on the imaging mass cytometer and are usually stable for a long period of time (at least one year). Data acquisition Data is acquired using the CyTOF software from Fluidigm (see manuals here ). The regions of interest are selected by providing coordinates for ablation. To determine the region to be imaged, so called \"panoramas\" can be generated. These are stitched images of single fields of views of about 200 \u03bcm in diameter. Panoramas provide an optical overview of the tissue with a resolution similar to 10x in microscopy and are intended to help with the selection of regions of interest for ablation. The tissue should be centered on the glass side, since the imaging mass cytometer cannot access roughly 5 mm from each of the slide edges. Currently, the instruments can process one slide at a time and one .mcd file per sample slide is generated. Many regions of interest can be defined on a single slide and acquisition parameters such as channels to acquire, acquisition speed (100 Hz, or 200 Hz), ablation energy, and other parameters are user-defined. It is recommended that all isotope channels are recorded. Some channels provide information on potential contamination of the argon gas (e.g., Xenon) or of the samples (e.g., lead, barium). This results in a raw data file larger in size than if only channels corresponding to metals used are acquired. To process a large number of slides or to select regions on whole-slide samples, panoramas may not provide sufficient information. If this is the case, multi-color immunofluorescence of the same slide prior to staining with metal-labeled antibodies may be performed. To allow for region selection based on immunofluorescence images and to align those images with a panorama of the same or consecutive sections of the sample, we developed napping . Acquisition time is directly proportional to the total size of ablation, and run times for samples of large area or for large sample numbers can be calculated by dividing the ablation area in square micrometer by the ablation speed (e.g., 200Hz). In addition to the proprietary .mcd file format, .txt files can also be generated for each region of interest. This is recommended as a back-up option in case of errors that may corrupt .mcd files but not .txt files. How the data looks Upon completion of the acquisition, an .mcd file of variable size is generated. This file contains all panoramas, all acquisition images, and image metadata. Additionally, for each acquisition a .txt file is generated that holds the same pixel information as the matched acquisitions in the .mcd file. We refer to this data as raw data. Further processing of these data is described in Image processing . To get a quick view of the data, multiple image viewers are available, and an overview is provided in Image visualization Giesen C. et al. (2014) Highly multiplexed imaging of tumor tissues with subcellular resolution by mass cytometry. Nat. Methods, 11, 417-422. \u21a9 \u21a9 \u21a9 Ijsselsteijn M.E. et al. (2019) A 40-Marker Panel for High Dimensional Characterization of Cancer Immune Microenvironments by Imaging Mass Cytometry. Frontiers in Immunology, 10, 2534. \u21a9","title":"Introduction"},{"location":"intro.html#an-introduction-to-imaging-mass-cytometry","text":"IMC\u2122 utilizes metal-tagged antibodies to detect over 40 proteins or other metal-tagged molecules in biological samples. IMC can be used to perform highly multiplexed imaging and is particularly suited to profiling selected areas of tissues across many samples. Overview of imaging mass cytometry data acquisition. Taken from Giesen et al. 1","title":"An introduction to imaging mass cytometry"},{"location":"intro.html#what-it-is","text":"IMC was first described by the Bodenmiller laboratory in 2014 1 . Since then it has been commercialised by Fluidigm \u00ae and is now distributed as the Hyperion\u2122 imaging system (documentation is available here ). IMC captures the spatial expression of multiple proteins and mRNA molecules in parallel. With a nominal 1 \u03bcm resolution, IMC is able to detect cytoplasmic and nuclear localisation of proteins. The current ablation frequency of IMC is 200Hz, meaning that a 1 mm 2 area can be imaged within about 2 hours.","title":"What it is"},{"location":"intro.html#how-it-works","text":"Technical aspects of data acquisition are described in the original publication 1 . Briefly, antibodies to detect targets in biological material are labeled with heavy metals (e.g., lanthanides) that do not occur in biological systems and thus can be used upon binding to their target as a readout similar to fluorophores in fluorescence microscopy. Thin sections of the biological sample on a glass slide are stained with an antibody cocktail. Stained microscopy slides are mounted on a precise motor-driven stage inside the ablation chamber of the IMC instrument. A high-energy UV laser is focused on the tissue, and each individual laser shot ablates tissue from an area of roughly 1 \u03bcm 2 . The energy of the laser is absorbed by the tissue resulting in vaporization followed by condensation of the ablated material. The ablated material from each laser shot is transported in the gas phase into the plasma of the mass cytometer, where first atomization of the particles and then ionization of the atoms occurs. The ion cloud is then transferred into a vacuum, and all ions below a mass of 80 m/z are filtered using a quadrupole mass filter. The remaining ions (mostly those used to tag antibodies) are analyzed in a time-of-flight mass spectrometer to ultimately obtain an accumulated mass spectrum from all ions that correspond to a single laser shot. One can regard this spectrum as the information underlying a 1 \u03bcm 2 pixel. With repetitive laser shots (e.g., at 200 Hz) and a simultaneous lateral sample movement, a tissue can be ablated pixel by pixel. Ultimately an image is reconstructed from each pixel mass spectrum. In principle, IMC can be applied to the same type of samples as conventional fluorescence microscopy. The largest distinction from fluorescence microscopy is that for IMC primary-labeled antibodies are commonly used, whereas in fluorescence microscopy secondary antibodies carrying fluorophores are widely applied. Additionally, for IMC, samples are dried before acquisition and can be stored for years. Formalin-fixed and paraffin-embedded (FFPE) samples are widely used for IMC. The FFPE blocks are cut to 2-5 \u03bcm thick sections and are stained, dried, and analyzed with IMC.","title":"How it works"},{"location":"intro.html#antibodies-and-staining","text":"Metal-labeled antibodies are used to stain molecules in tissues enabling to delineate tissue structures, cells, and subcellular structures. Metal-conjugated antibodies can either be purchased directly from Fluidigm ( MaxPar IMC Antibodies ), or antibodies can be purchased and labeled individually ( MaxPar Antibody Labeling ). Antibody labeling using the MaxPar kits is performed via TCEP antibody reduction followed by crosslinking with sulfhydryl-reactive maleimide-bearing metal polymers. For each antibody it is essential to validate its functionality, specificity and optimize its usage to provide optimal signal to noise. To facilitate antibody handling, a database is highly useful. Airlab is such a platform; it allows antibody lot tracking, validation data uploads, and panel generation for subsequent upload to the IMC acquisition software from Fluidigm. Depending on the sample type, different staining protocols can be used. Generally, once antibodies of choice have been conjugated to a metal tag, titration experiments are performed to identify the optimal staining concentration. For FFPE samples, different staining protocols have been described, and different antibodies show variable staining with different protocols. Protocols such as the one provided by Fluidigm or the one describe by Ijsselsteijn et al. 2 are recommended. Briefly, for FFPE tissues, a dewaxing step is performed to remove the paraffin used to embed the material, followed by a graded re-hydration of the samples. Thereafter, heat-induced epitope retrieval (HIER), a step aiming at the reversal of formalin-based fixation, is used to unmask epitopes within tissues and make them accessible to antibodies. Epitope unmasking is generally performed in either basic, EDTA-based buffers (pH 9.2) or acidic, citrate-based buffers (pH 6). Next, a buffer containing bovine serum albumin (BSA) is used to block non-specific binding. This buffer is also used to dilute antibody stocks for the actual antibody staining. Staining time and temperature may vary and optimization must be performed to ensure that each single antibody performs well. However, overnight staining at 4\u00b0C or 3-5 hours at room temperature seem to be suitable in many cases. Following antibody incubation, unbound antibodies are washed away and a counterstain comparable to DAPI is applied to enable the identification of nuclei. The Iridium intercalator from Fluidigm is a reagent of choice and applied in a brief 5 minute staining. Finally, the samples are washed again and then dried under an airflow. Once dried, the samples are ready for analysis on the imaging mass cytometer and are usually stable for a long period of time (at least one year).","title":"Antibodies and Staining"},{"location":"intro.html#data-acquisition","text":"Data is acquired using the CyTOF software from Fluidigm (see manuals here ). The regions of interest are selected by providing coordinates for ablation. To determine the region to be imaged, so called \"panoramas\" can be generated. These are stitched images of single fields of views of about 200 \u03bcm in diameter. Panoramas provide an optical overview of the tissue with a resolution similar to 10x in microscopy and are intended to help with the selection of regions of interest for ablation. The tissue should be centered on the glass side, since the imaging mass cytometer cannot access roughly 5 mm from each of the slide edges. Currently, the instruments can process one slide at a time and one .mcd file per sample slide is generated. Many regions of interest can be defined on a single slide and acquisition parameters such as channels to acquire, acquisition speed (100 Hz, or 200 Hz), ablation energy, and other parameters are user-defined. It is recommended that all isotope channels are recorded. Some channels provide information on potential contamination of the argon gas (e.g., Xenon) or of the samples (e.g., lead, barium). This results in a raw data file larger in size than if only channels corresponding to metals used are acquired. To process a large number of slides or to select regions on whole-slide samples, panoramas may not provide sufficient information. If this is the case, multi-color immunofluorescence of the same slide prior to staining with metal-labeled antibodies may be performed. To allow for region selection based on immunofluorescence images and to align those images with a panorama of the same or consecutive sections of the sample, we developed napping . Acquisition time is directly proportional to the total size of ablation, and run times for samples of large area or for large sample numbers can be calculated by dividing the ablation area in square micrometer by the ablation speed (e.g., 200Hz). In addition to the proprietary .mcd file format, .txt files can also be generated for each region of interest. This is recommended as a back-up option in case of errors that may corrupt .mcd files but not .txt files.","title":"Data acquisition"},{"location":"intro.html#how-the-data-looks","text":"Upon completion of the acquisition, an .mcd file of variable size is generated. This file contains all panoramas, all acquisition images, and image metadata. Additionally, for each acquisition a .txt file is generated that holds the same pixel information as the matched acquisitions in the .mcd file. We refer to this data as raw data. Further processing of these data is described in Image processing . To get a quick view of the data, multiple image viewers are available, and an overview is provided in Image visualization Giesen C. et al. (2014) Highly multiplexed imaging of tumor tissues with subcellular resolution by mass cytometry. Nat. Methods, 11, 417-422. \u21a9 \u21a9 \u21a9 Ijsselsteijn M.E. et al. (2019) A 40-Marker Panel for High Dimensional Characterization of Cancer Immune Microenvironments by Imaging Mass Cytometry. Frontiers in Immunology, 10, 2534. \u21a9","title":"How the data looks"},{"location":"process.html","text":"IMC image processing The following sections describe the processing of raw IMC\u2122 data, including file type conversion, image segmentation, feature extraction, and data export. More detailed information can be found in the individual repositories: IMC Segmentation Pipeline : Raw IMC data pre-processing is performed using the imctools Python package to convert raw .mcd files into .ome.tiff and .tiff files. After image cropping, an ilastik pixel classifier is trained for image classification prior to image segmentation using CellProfiler . Features (e.g. mean pixel intensity) of segmented objects (e.g. cells) are quantified and exported. Read more in the Docs steinbock : The steinbock framework offers tools for multi-channel image processing using the command-line or Python code. Supported tasks include IMC data preprocessing, supervised multi-channel image segmentation, object quantification and data export to a variety of file formats. The steinbock framework supports functionality similar to those of the IMC Segmentation Pipeline and further allows deep learning-enabled image segmentation. The framework is available as platform-independent Docker container, ensuring reproducibility and user-friendly installation. Read more in the Docs and the paper . MCD file type IMC raw data are saved in the proprietary MCD\u2122 file type. A single .mcd file can hold raw acquisition data for multiple regions of interest, optical images providing a slide-level overview of the sample (\"panoramas\"), and detailed metadata about the experiment. The .mcd files can be read by the MCD viewer (see Image visualization ) but cannot be widely read by image analysis software. To facilitate IMC data pre-processing, the readimc and imctools Python packages allow extraction of the multi-modal (IMC acquisitions, panoramas), multi-region, multi-channel information contained in raw IMC images. Whereas imctools contains functionality specific to the IMC Segmentation Pipeline, the readimc package contains reader functions for IMC raw data and should be used for this purpose. A common first step of IMC pre-processing is the conversion of raw data from .mcd files to multi-channel .tiff files. Image pre-processing Starting from IMC raw data and a \"panel\" file, individual acquisitions are extracted as .tiff and .ome.tiff files. The panel file contains information on antibodies used in the experiment, and the user can specify which channels to keep for downstream analysis. If random forest-based image segmentation is performed (see next section), random tiles are cropped from images for convenience of pixel labeling. Image segmentation The IMC Segmentation Pipeline supports random forest-based image segmentation, whereas steinbock supports random forest-based and deep learning-based segmentation. Random forest-based image segmentation is performed by training a pixel classifier using ilastik on the randomly extracted image crops and selected image channels. Pixels are classified as nuclear, cytoplasmic, or background. Employing a customizable CellProfiler pipeline, the probabilities are then thresholded to segment nuclei, and nuclei are expanded into cytoplasmic regions to obtain cell masks. Deep learning-based image segmentation is performed as presented by Greenwald et al. 1 . Briefly, steinbock first aggregates user-defined image channels to generate two-channel images representing nuclear and cytoplasmic signals. Next, the DeepCell Python package is used to run Mesmer , a deep learning-enabled segmentation algorithm pre-trained on TissueNet , to automatically obtain cell masks without any further user input. Segmentation masks are single-channel images that match the input images in size. In these images, non-zero grayscale values indicate the IDs of segmented objects (e.g., cells). These masks are written out as .tiff files after segmentation. Feature extraction Either the IMC Segmentation Pipeline or steinbock can be used to extract object-specific features from the segmentation masks together with the multi-channel images. The object-specific features include the mean pixel intensity per object and channel, morphological features (e.g., object area) and the object locations. Object-specific features are output as .csv files, where rows represent individual objects and columns represent features. Both the IMC Segmentation Pipeline and steinbock can be used to compute spatial object graphs , in which nodes correspond to objects, and nodes in spatial proximity are connected by an edge. These graphs serve as proxies for interactions between neighboring cells. They are stored as edge lists in form of .csv files. Both the IMC Segmentation Pipeline and steinbock also write out image-specific metadata (e.g., width and height) as .csv files. Data export To facilitate compatibility with downstream analysis, steinbock exports data to a variety of file formats such as OME-TIFF for images, FCS for single-cell data, the anndata 2 format for data analysis in Python, and various graph file formats for network analysis using software such as CytoScape 3 . For export to OME-TIFF, steinbock uses xtiff , a Python package developed for writing multi-channel .tiff stacks. Greenwald N. et al. (2021) Whole-cell segmentation of tissue images with human-level performance using large-scale data annotation and deep learning. Nature Biotechnology \u21a9 Wolf A. F. et al. (2018) SCANPY: large-scale single-cell gene expression data analysis. Genome Biology \u21a9 Shannon P. et al. (2003) Cytoscape: A Software Environment for Integrated Models of Biomolecular Interaction Networks. Genome Research \u21a9","title":"Image processing"},{"location":"process.html#imc-image-processing","text":"The following sections describe the processing of raw IMC\u2122 data, including file type conversion, image segmentation, feature extraction, and data export. More detailed information can be found in the individual repositories: IMC Segmentation Pipeline : Raw IMC data pre-processing is performed using the imctools Python package to convert raw .mcd files into .ome.tiff and .tiff files. After image cropping, an ilastik pixel classifier is trained for image classification prior to image segmentation using CellProfiler . Features (e.g. mean pixel intensity) of segmented objects (e.g. cells) are quantified and exported. Read more in the Docs steinbock : The steinbock framework offers tools for multi-channel image processing using the command-line or Python code. Supported tasks include IMC data preprocessing, supervised multi-channel image segmentation, object quantification and data export to a variety of file formats. The steinbock framework supports functionality similar to those of the IMC Segmentation Pipeline and further allows deep learning-enabled image segmentation. The framework is available as platform-independent Docker container, ensuring reproducibility and user-friendly installation. Read more in the Docs and the paper .","title":"IMC image processing"},{"location":"process.html#mcd-file-type","text":"IMC raw data are saved in the proprietary MCD\u2122 file type. A single .mcd file can hold raw acquisition data for multiple regions of interest, optical images providing a slide-level overview of the sample (\"panoramas\"), and detailed metadata about the experiment. The .mcd files can be read by the MCD viewer (see Image visualization ) but cannot be widely read by image analysis software. To facilitate IMC data pre-processing, the readimc and imctools Python packages allow extraction of the multi-modal (IMC acquisitions, panoramas), multi-region, multi-channel information contained in raw IMC images. Whereas imctools contains functionality specific to the IMC Segmentation Pipeline, the readimc package contains reader functions for IMC raw data and should be used for this purpose. A common first step of IMC pre-processing is the conversion of raw data from .mcd files to multi-channel .tiff files.","title":"MCD file type"},{"location":"process.html#image-pre-processing","text":"Starting from IMC raw data and a \"panel\" file, individual acquisitions are extracted as .tiff and .ome.tiff files. The panel file contains information on antibodies used in the experiment, and the user can specify which channels to keep for downstream analysis. If random forest-based image segmentation is performed (see next section), random tiles are cropped from images for convenience of pixel labeling.","title":"Image pre-processing"},{"location":"process.html#image-segmentation","text":"The IMC Segmentation Pipeline supports random forest-based image segmentation, whereas steinbock supports random forest-based and deep learning-based segmentation. Random forest-based image segmentation is performed by training a pixel classifier using ilastik on the randomly extracted image crops and selected image channels. Pixels are classified as nuclear, cytoplasmic, or background. Employing a customizable CellProfiler pipeline, the probabilities are then thresholded to segment nuclei, and nuclei are expanded into cytoplasmic regions to obtain cell masks. Deep learning-based image segmentation is performed as presented by Greenwald et al. 1 . Briefly, steinbock first aggregates user-defined image channels to generate two-channel images representing nuclear and cytoplasmic signals. Next, the DeepCell Python package is used to run Mesmer , a deep learning-enabled segmentation algorithm pre-trained on TissueNet , to automatically obtain cell masks without any further user input. Segmentation masks are single-channel images that match the input images in size. In these images, non-zero grayscale values indicate the IDs of segmented objects (e.g., cells). These masks are written out as .tiff files after segmentation.","title":"Image segmentation"},{"location":"process.html#feature-extraction","text":"Either the IMC Segmentation Pipeline or steinbock can be used to extract object-specific features from the segmentation masks together with the multi-channel images. The object-specific features include the mean pixel intensity per object and channel, morphological features (e.g., object area) and the object locations. Object-specific features are output as .csv files, where rows represent individual objects and columns represent features. Both the IMC Segmentation Pipeline and steinbock can be used to compute spatial object graphs , in which nodes correspond to objects, and nodes in spatial proximity are connected by an edge. These graphs serve as proxies for interactions between neighboring cells. They are stored as edge lists in form of .csv files. Both the IMC Segmentation Pipeline and steinbock also write out image-specific metadata (e.g., width and height) as .csv files.","title":"Feature extraction"},{"location":"process.html#data-export","text":"To facilitate compatibility with downstream analysis, steinbock exports data to a variety of file formats such as OME-TIFF for images, FCS for single-cell data, the anndata 2 format for data analysis in Python, and various graph file formats for network analysis using software such as CytoScape 3 . For export to OME-TIFF, steinbock uses xtiff , a Python package developed for writing multi-channel .tiff stacks. Greenwald N. et al. (2021) Whole-cell segmentation of tissue images with human-level performance using large-scale data annotation and deep learning. Nature Biotechnology \u21a9 Wolf A. F. et al. (2018) SCANPY: large-scale single-cell gene expression data analysis. Genome Biology \u21a9 Shannon P. et al. (2003) Cytoscape: A Software Environment for Integrated Models of Biomolecular Interaction Networks. Genome Research \u21a9","title":"Data export"},{"location":"viewers.html","text":"Viewing IMC data During image processing , raw IMC\u2122 data files are converted into multi-channel .tiff or .ome.tiff files. These can be visualized using common image viewers, including ImageJ/Fiji and QuPath . Specialized image viewers are necessary to visualize acquisitions, panoramas and segmented objects. MCD viewer The MCD viewer distributed by Fluidigm\u00ae for Windows only allows visualization of MCD\u2122 files. The user can view individual acquisitions (also referred to as regions of interest) and multiple channels. histoCAT The histoCAT 1 software offers interactive visualization of IMC data. It requires pre-processing of raw IMC data using the IMC Segmentation Pipeline (see image processing ) to generate single-channel .tiff files. When supplied segmentation masks, histoCAT can extract object-specific features and supports clustering, dimensionality reduction and interaction testing. Read more in the Docs and in the paper . histoCAT-web A browser-based implementation of histoCAT is provided by histoCAT-web . Once deployed, histoCAT-web reads raw IMC data files and offers an extended set of histoCAT functionalities. Read more in the Docs . napari-imc napari is a fast, interactive, multi-dimensional image viewer, and the napari-imc plugin can be used to directly read raw IMC data. The napari-imc plugin supports visualization of panoramas and multi-channel acquisitions in the machine's coordinate system (i.e., the panoramas and acquisitions are spatially aligned with respect to each other). Read more in the paper . Shapiro D. et al. (2017) histoCAT: analysis of cell phenotypes and interactions in multiplex image cytometry data. Nature Methods \u21a9","title":"Image visualization"},{"location":"viewers.html#viewing-imc-data","text":"During image processing , raw IMC\u2122 data files are converted into multi-channel .tiff or .ome.tiff files. These can be visualized using common image viewers, including ImageJ/Fiji and QuPath . Specialized image viewers are necessary to visualize acquisitions, panoramas and segmented objects.","title":"Viewing IMC data"},{"location":"viewers.html#mcd-viewer","text":"The MCD viewer distributed by Fluidigm\u00ae for Windows only allows visualization of MCD\u2122 files. The user can view individual acquisitions (also referred to as regions of interest) and multiple channels.","title":"MCD viewer"},{"location":"viewers.html#histocat","text":"The histoCAT 1 software offers interactive visualization of IMC data. It requires pre-processing of raw IMC data using the IMC Segmentation Pipeline (see image processing ) to generate single-channel .tiff files. When supplied segmentation masks, histoCAT can extract object-specific features and supports clustering, dimensionality reduction and interaction testing. Read more in the Docs and in the paper .","title":"histoCAT"},{"location":"viewers.html#histocat-web","text":"A browser-based implementation of histoCAT is provided by histoCAT-web . Once deployed, histoCAT-web reads raw IMC data files and offers an extended set of histoCAT functionalities. Read more in the Docs .","title":"histoCAT-web"},{"location":"viewers.html#napari-imc","text":"napari is a fast, interactive, multi-dimensional image viewer, and the napari-imc plugin can be used to directly read raw IMC data. The napari-imc plugin supports visualization of panoramas and multi-channel acquisitions in the machine's coordinate system (i.e., the panoramas and acquisitions are spatially aligned with respect to each other). Read more in the paper . Shapiro D. et al. (2017) histoCAT: analysis of cell phenotypes and interactions in multiplex image cytometry data. Nature Methods \u21a9","title":"napari-imc"}]}